/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BankInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEEPER_ROLE()": FunctionFragment;
    "PRICE_UPDATER_ROLE()": FunctionFragment;
    "addKeeper(address)": FunctionFragment;
    "addPriceUpdater(address)": FunctionFragment;
    "getBankFactoryOwner()": FunctionFragment;
    "getCollateralTokenAddress()": FunctionFragment;
    "getCollateralTokenLastUpdatedAt()": FunctionFragment;
    "getCollateralTokenPrice()": FunctionFragment;
    "getCollateralTokenPriceGranularity()": FunctionFragment;
    "getCollateralizationRatio()": FunctionFragment;
    "getCurrentValue(uint256)": FunctionFragment;
    "getDebtTokenAddress()": FunctionFragment;
    "getDebtTokenLastUpdatedAt()": FunctionFragment;
    "getDebtTokenPrice()": FunctionFragment;
    "getDebtTokenPriceGranularity()": FunctionFragment;
    "getInterestRate()": FunctionFragment;
    "getLiquidationPenalty()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOriginationFee()": FunctionFragment;
    "getReserveBalance()": FunctionFragment;
    "getReserveCollateralBalance()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getVaultCollateralAmount()": FunctionFragment;
    "getVaultCollateralizationRatio(address)": FunctionFragment;
    "getVaultDebtAmount()": FunctionFragment;
    "getVaultRepayAmount()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "init(address,string,uint256,uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reserveDeposit(uint256)": FunctionFragment;
    "reserveWithdraw(uint256)": FunctionFragment;
    "reserveWithdrawCollateral(uint256)": FunctionFragment;
    "revokeKeeper(address)": FunctionFragment;
    "revokePriceUpdater(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBankFactoryOwner(address)": FunctionFragment;
    "setCollateral(address,uint256,uint256,uint256)": FunctionFragment;
    "setDebt(address,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateCollateralPrice()": FunctionFragment;
    "updateDebtPrice()": FunctionFragment;
    "vaultBorrow(uint256)": FunctionFragment;
    "vaultDeposit(uint256)": FunctionFragment;
    "vaultRepay(uint256)": FunctionFragment;
    "vaultWithdraw(uint256)": FunctionFragment;
    "vaults(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_UPDATER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addPriceUpdater",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBankFactoryOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenLastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenPriceGranularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenLastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenPriceGranularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOriginationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveCollateralBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateralizationRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDebtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultRepayAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWithdrawCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePriceUpdater",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBankFactoryOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateral",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebt",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebtPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultRepay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_UPDATER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPriceUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBankFactoryOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenLastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenPriceGranularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenLastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenPriceGranularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDebtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePriceUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBankFactoryOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultRepay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {
    "Liquidation(address,uint256)": EventFragment;
    "PriceUpdate(address,uint256)": EventFragment;
    "ReserveDeposit(uint256)": EventFragment;
    "ReserveWithdraw(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "VaultBorrow(address,uint256)": EventFragment;
    "VaultDeposit(address,uint256)": EventFragment;
    "VaultRepay(address,uint256)": EventFragment;
    "VaultWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRepay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultWithdraw"): EventFragment;
}

export class Bank extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BankInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "KEEPER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PRICE_UPDATER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PRICE_UPDATER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addKeeper(
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPriceUpdater(
      updater: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPriceUpdater(address)"(
      updater: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBankFactoryOwner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getBankFactoryOwner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getCollateralTokenAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getCollateralTokenAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getCollateralTokenLastUpdatedAt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getCollateralTokenLastUpdatedAt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getCollateralTokenPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getCollateralTokenPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getCollateralTokenPriceGranularity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getCollateralTokenPriceGranularity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getCollateralizationRatio(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getCollateralizationRatio()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ifRetrieve: boolean;
      value: BigNumber;
      _timestampRetrieved: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ifRetrieve: boolean;
      value: BigNumber;
      _timestampRetrieved: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    getDebtTokenAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getDebtTokenAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getDebtTokenLastUpdatedAt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getDebtTokenPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getDebtTokenPriceGranularity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getDebtTokenPriceGranularity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getInterestRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getInterestRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getLiquidationPenalty(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLiquidationPenalty()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getName(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getName()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getOriginationFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getOriginationFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getReserveBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getReserveBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getReserveCollateralBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getReserveCollateralBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVaultCollateralAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getVaultCollateralAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVaultCollateralizationRatio(address)"(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVaultDebtAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getVaultDebtAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getVaultRepayAmount(overrides?: CallOverrides): Promise<{
      principal: BigNumber;
      0: BigNumber;
    }>;

    "getVaultRepayAmount()"(overrides?: CallOverrides): Promise<{
      principal: BigNumber;
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address,string,uint256,uint256,uint256,uint256,uint256,address,address)"(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidate(
      vaultOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(address)"(
      vaultOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reserveDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reserveWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reserveWithdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeKeeper(
      oldKeeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeKeeper(address)"(
      oldKeeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokePriceUpdater(
      oldUpdater: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokePriceUpdater(address)"(
      oldUpdater: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBankFactoryOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateral(address,uint256,uint256,uint256)"(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDebt(address,uint256,uint256,uint256)"(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    updateCollateralPrice(overrides?: Overrides): Promise<ContractTransaction>;

    "updateCollateralPrice()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateDebtPrice(overrides?: Overrides): Promise<ContractTransaction>;

    "updateDebtPrice()"(overrides?: Overrides): Promise<ContractTransaction>;

    vaultBorrow(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vaultBorrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vaultDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vaultRepay(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vaultRepay(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vaultWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateralAmount: BigNumber;
      debtAmount: BigNumber;
      createdAt: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateralAmount: BigNumber;
      debtAmount: BigNumber;
      createdAt: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  "KEEPER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  PRICE_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

  "PRICE_UPDATER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addKeeper(
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addKeeper(address)"(
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPriceUpdater(
    updater: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPriceUpdater(address)"(
    updater: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBankFactoryOwner(overrides?: CallOverrides): Promise<string>;

  "getBankFactoryOwner()"(overrides?: CallOverrides): Promise<string>;

  getCollateralTokenAddress(overrides?: CallOverrides): Promise<string>;

  "getCollateralTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  getCollateralTokenLastUpdatedAt(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralTokenLastUpdatedAt()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getCollateralTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralTokenPriceGranularity(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralTokenPriceGranularity()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "getCollateralizationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentValue(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    ifRetrieve: boolean;
    value: BigNumber;
    _timestampRetrieved: BigNumber;
    0: boolean;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getCurrentValue(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    ifRetrieve: boolean;
    value: BigNumber;
    _timestampRetrieved: BigNumber;
    0: boolean;
    1: BigNumber;
    2: BigNumber;
  }>;

  getDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

  "getDebtTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "getDebtTokenLastUpdatedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDebtTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getDebtTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDebtTokenPriceGranularity(overrides?: CallOverrides): Promise<BigNumber>;

  "getDebtTokenPriceGranularity()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  "getInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidationPenalty()"(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getOriginationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getReserveBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReserveCollateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getReserveCollateralBalance()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getVaultCollateralAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultCollateralizationRatio(
    vaultOwner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVaultCollateralizationRatio(address)"(
    vaultOwner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getVaultDebtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultRepayAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getVaultRepayAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    creator: string,
    bankName: string,
    interestRate: BigNumberish,
    originationFee: BigNumberish,
    collateralizationRatio: BigNumberish,
    liquidationPenalty: BigNumberish,
    period: BigNumberish,
    bankFactoryOwner: string,
    oracleContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address,string,uint256,uint256,uint256,uint256,uint256,address,address)"(
    creator: string,
    bankName: string,
    interestRate: BigNumberish,
    originationFee: BigNumberish,
    collateralizationRatio: BigNumberish,
    liquidationPenalty: BigNumberish,
    period: BigNumberish,
    bankFactoryOwner: string,
    oracleContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidate(
    vaultOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(address)"(
    vaultOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reserveDeposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reserveDeposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reserveWithdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reserveWithdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reserveWithdrawCollateral(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reserveWithdrawCollateral(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeKeeper(
    oldKeeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeKeeper(address)"(
    oldKeeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokePriceUpdater(
    oldUpdater: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokePriceUpdater(address)"(
    oldUpdater: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBankFactoryOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBankFactoryOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCollateral(
    collateralToken: string,
    collateralTokenTellorRequestId: BigNumberish,
    collateralTokenPriceGranularity: BigNumberish,
    collateralTokenPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateral(address,uint256,uint256,uint256)"(
    collateralToken: string,
    collateralTokenTellorRequestId: BigNumberish,
    collateralTokenPriceGranularity: BigNumberish,
    collateralTokenPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDebt(
    debtToken: string,
    debtTokenTellorRequestId: BigNumberish,
    debtTokenPriceGranularity: BigNumberish,
    debtTokenPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDebt(address,uint256,uint256,uint256)"(
    debtToken: string,
    debtTokenTellorRequestId: BigNumberish,
    debtTokenPriceGranularity: BigNumberish,
    debtTokenPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateCollateralPrice(overrides?: Overrides): Promise<ContractTransaction>;

  "updateCollateralPrice()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateDebtPrice(overrides?: Overrides): Promise<ContractTransaction>;

  "updateDebtPrice()"(overrides?: Overrides): Promise<ContractTransaction>;

  vaultBorrow(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vaultBorrow(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vaultDeposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vaultDeposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vaultRepay(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vaultRepay(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vaultWithdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vaultWithdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vaults(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    collateralAmount: BigNumber;
    debtAmount: BigNumber;
    createdAt: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "vaults(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    collateralAmount: BigNumber;
    debtAmount: BigNumber;
    createdAt: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    "KEEPER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    PRICE_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

    "PRICE_UPDATER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addKeeper(keeper: string, overrides?: CallOverrides): Promise<void>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPriceUpdater(updater: string, overrides?: CallOverrides): Promise<void>;

    "addPriceUpdater(address)"(
      updater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBankFactoryOwner(overrides?: CallOverrides): Promise<string>;

    "getBankFactoryOwner()"(overrides?: CallOverrides): Promise<string>;

    getCollateralTokenAddress(overrides?: CallOverrides): Promise<string>;

    "getCollateralTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    getCollateralTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralTokenLastUpdatedAt()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateralTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralTokenPriceGranularity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateralizationRatio()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ifRetrieve: boolean;
      value: BigNumber;
      _timestampRetrieved: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ifRetrieve: boolean;
      value: BigNumber;
      _timestampRetrieved: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    getDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

    "getDebtTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtTokenLastUpdatedAt()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenPriceGranularity(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtTokenPriceGranularity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidationPenalty()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getOriginationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserveBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveCollateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserveCollateralBalance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultCollateralAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultCollateralizationRatio(address)"(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultDebtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRepayAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultRepayAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,string,uint256,uint256,uint256,uint256,uint256,address,address)"(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(vaultOwner: string, overrides?: CallOverrides): Promise<void>;

    "liquidate(address)"(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "reserveDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "reserveWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "reserveWithdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeKeeper(oldKeeper: string, overrides?: CallOverrides): Promise<void>;

    "revokeKeeper(address)"(
      oldKeeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePriceUpdater(
      oldUpdater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokePriceUpdater(address)"(
      oldUpdater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBankFactoryOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateral(address,uint256,uint256,uint256)"(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDebt(address,uint256,uint256,uint256)"(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateCollateralPrice(overrides?: CallOverrides): Promise<void>;

    "updateCollateralPrice()"(overrides?: CallOverrides): Promise<void>;

    updateDebtPrice(overrides?: CallOverrides): Promise<void>;

    "updateDebtPrice()"(overrides?: CallOverrides): Promise<void>;

    vaultBorrow(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "vaultBorrow(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "vaultDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultRepay(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "vaultRepay(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "vaultWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateralAmount: BigNumber;
      debtAmount: BigNumber;
      createdAt: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      collateralAmount: BigNumber;
      debtAmount: BigNumber;
      createdAt: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  filters: {
    Liquidation(borrower: string | null, debtAmount: null): EventFilter;

    PriceUpdate(token: string | null, price: null): EventFilter;

    ReserveDeposit(amount: null): EventFilter;

    ReserveWithdraw(token: string | null, amount: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    VaultBorrow(borrower: string | null, amount: null): EventFilter;

    VaultDeposit(owner: string | null, amount: null): EventFilter;

    VaultRepay(borrower: string | null, amount: null): EventFilter;

    VaultWithdraw(borrower: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "KEEPER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_UPDATER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "PRICE_UPDATER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addKeeper(keeper: string, overrides?: Overrides): Promise<BigNumber>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPriceUpdater(updater: string, overrides?: Overrides): Promise<BigNumber>;

    "addPriceUpdater(address)"(
      updater: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBankFactoryOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getBankFactoryOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateralTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralTokenLastUpdatedAt()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateralTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralTokenPriceGranularity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateralizationRatio()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenLastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtTokenLastUpdatedAt()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenPriceGranularity(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtTokenPriceGranularity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidationPenalty()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getOriginationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserveBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveCollateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserveCollateralBalance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultCollateralAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultCollateralizationRatio(address)"(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultDebtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultRepayAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultRepayAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address,string,uint256,uint256,uint256,uint256,uint256,address,address)"(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidate(vaultOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "liquidate(address)"(
      vaultOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reserveDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reserveWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reserveWithdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeKeeper(oldKeeper: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeKeeper(address)"(
      oldKeeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokePriceUpdater(
      oldUpdater: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokePriceUpdater(address)"(
      oldUpdater: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBankFactoryOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateral(address,uint256,uint256,uint256)"(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDebt(address,uint256,uint256,uint256)"(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCollateralPrice(overrides?: Overrides): Promise<BigNumber>;

    "updateCollateralPrice()"(overrides?: Overrides): Promise<BigNumber>;

    updateDebtPrice(overrides?: Overrides): Promise<BigNumber>;

    "updateDebtPrice()"(overrides?: Overrides): Promise<BigNumber>;

    vaultBorrow(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vaultBorrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vaultDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vaultRepay(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "vaultRepay(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vaultWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KEEPER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_UPDATER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PRICE_UPDATER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addKeeper(
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPriceUpdater(
      updater: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPriceUpdater(address)"(
      updater: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBankFactoryOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBankFactoryOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralTokenLastUpdatedAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralTokenPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralTokenPriceGranularity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralizationRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDebtTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtTokenLastUpdatedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDebtTokenLastUpdatedAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDebtTokenPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtTokenPriceGranularity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDebtTokenPriceGranularity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInterestRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationPenalty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationPenalty()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOriginationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOriginationFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserveBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveCollateralBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveCollateralBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateralAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultCollateralAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateralizationRatio(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultCollateralizationRatio(address)"(
      vaultOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultDebtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultDebtAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultRepayAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultRepayAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address,string,uint256,uint256,uint256,uint256,uint256,address,address)"(
      creator: string,
      bankName: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      bankFactoryOwner: string,
      oracleContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      vaultOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(address)"(
      vaultOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reserveDeposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reserveDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reserveWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reserveWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reserveWithdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reserveWithdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeKeeper(
      oldKeeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeKeeper(address)"(
      oldKeeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokePriceUpdater(
      oldUpdater: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokePriceUpdater(address)"(
      oldUpdater: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBankFactoryOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBankFactoryOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCollateral(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateral(address,uint256,uint256,uint256)"(
      collateralToken: string,
      collateralTokenTellorRequestId: BigNumberish,
      collateralTokenPriceGranularity: BigNumberish,
      collateralTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDebt(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDebt(address,uint256,uint256,uint256)"(
      debtToken: string,
      debtTokenTellorRequestId: BigNumberish,
      debtTokenPriceGranularity: BigNumberish,
      debtTokenPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCollateralPrice(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateCollateralPrice()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateDebtPrice(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateDebtPrice()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    vaultBorrow(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vaultBorrow(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vaultDeposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vaultDeposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vaultRepay(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vaultRepay(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vaultWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vaultWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaults(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
