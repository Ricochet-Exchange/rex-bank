/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BankFactoryInterface extends ethers.utils.Interface {
  functions: {
    "bankAddress()": FunctionFragment;
    "createBank(string,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "getBankAddressAtIndex(uint256)": FunctionFragment;
    "getNumberOfBanks()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bankAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBank",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBankAddressAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfBanks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bankAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBankAddressAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BankCreated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BankCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class BankFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BankFactoryInterface;

  functions: {
    bankAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bankAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createBank(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createBank(string,uint256,uint256,uint256,uint256,uint256,address)"(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBankAddressAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getBankAddressAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getNumberOfBanks(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getNumberOfBanks()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  bankAddress(overrides?: CallOverrides): Promise<string>;

  "bankAddress()"(overrides?: CallOverrides): Promise<string>;

  createBank(
    name: string,
    interestRate: BigNumberish,
    originationFee: BigNumberish,
    collateralizationRatio: BigNumberish,
    liquidationPenalty: BigNumberish,
    period: BigNumberish,
    oracleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createBank(string,uint256,uint256,uint256,uint256,uint256,address)"(
    name: string,
    interestRate: BigNumberish,
    originationFee: BigNumberish,
    collateralizationRatio: BigNumberish,
    liquidationPenalty: BigNumberish,
    period: BigNumberish,
    oracleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBankAddressAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBankAddressAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNumberOfBanks(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumberOfBanks()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    bankAddress(overrides?: CallOverrides): Promise<string>;

    "bankAddress()"(overrides?: CallOverrides): Promise<string>;

    createBank(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createBank(string,uint256,uint256,uint256,uint256,uint256,address)"(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getBankAddressAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBankAddressAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNumberOfBanks(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfBanks()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BankCreated(newBankAddress: null, owner: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    bankAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "bankAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    createBank(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createBank(string,uint256,uint256,uint256,uint256,uint256,address)"(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBankAddressAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBankAddressAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfBanks(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfBanks()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bankAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bankAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createBank(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createBank(string,uint256,uint256,uint256,uint256,uint256,address)"(
      name: string,
      interestRate: BigNumberish,
      originationFee: BigNumberish,
      collateralizationRatio: BigNumberish,
      liquidationPenalty: BigNumberish,
      period: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBankAddressAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBankAddressAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfBanks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumberOfBanks()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
