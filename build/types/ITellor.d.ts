/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITellorInterface extends ethers.utils.Interface {
  functions: {
    "addTip(uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "allowedToTrade(address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "beginDispute(uint256,uint256,uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositStake()": FunctionFragment;
    "didMine(bytes32,address)": FunctionFragment;
    "didVote(uint256,address)": FunctionFragment;
    "getAddressVars(bytes32)": FunctionFragment;
    "getAllDisputeVars(uint256)": FunctionFragment;
    "getCurrentVariables()": FunctionFragment;
    "getDisputeIdByDisputeHash(bytes32)": FunctionFragment;
    "getDisputeUintVars(uint256,bytes32)": FunctionFragment;
    "getLastNewValue()": FunctionFragment;
    "getLastNewValueById(uint256)": FunctionFragment;
    "getMinedBlockNum(uint256,uint256)": FunctionFragment;
    "getMinersByRequestIdAndTimestamp(uint256,uint256)": FunctionFragment;
    "getNewCurrentVariables()": FunctionFragment;
    "getNewValueCountbyRequestId(uint256)": FunctionFragment;
    "getNewVariablesOnDeck()": FunctionFragment;
    "getRequestIdByQueryHash(bytes32)": FunctionFragment;
    "getRequestIdByRequestQIndex(uint256)": FunctionFragment;
    "getRequestIdByTimestamp(uint256)": FunctionFragment;
    "getRequestQ()": FunctionFragment;
    "getRequestUintVars(uint256,bytes32)": FunctionFragment;
    "getRequestVars(uint256)": FunctionFragment;
    "getStakerInfo(address)": FunctionFragment;
    "getSubmissionsByTimestamp(uint256,uint256)": FunctionFragment;
    "getTimestampbyRequestIDandIndex(uint256,uint256)": FunctionFragment;
    "getTopRequestIDs()": FunctionFragment;
    "getUintVar(bytes32)": FunctionFragment;
    "getVariablesOnDeck()": FunctionFragment;
    "isInDispute(uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "proposeFork(address)": FunctionFragment;
    "proposeOwnership(address)": FunctionFragment;
    "requestStakingWithdraw()": FunctionFragment;
    "retrieveData(uint256,uint256)": FunctionFragment;
    "submitMiningSolution(string,uint256[5],uint256[5])": FunctionFragment;
    "symbol()": FunctionFragment;
    "tallyVotes(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlockDisputeFee(uint256)": FunctionFragment;
    "updateTellor(uint256)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
    "withdrawStake()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTip",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedToTrade",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beginDispute",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didMine",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "didVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressVars",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDisputeVars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVariables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeIdByDisputeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeUintVars",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNewValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNewValueById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinedBlockNum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinersByRequestIdAndTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewCurrentVariables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewValueCountbyRequestId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewVariablesOnDeck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByQueryHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByRequestQIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQ",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestUintVars",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestVars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionsByTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampbyRequestIDandIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopRequestIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUintVar",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVariablesOnDeck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "proposeFork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposeOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestStakingWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMiningSolution",
    values: [
      string,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockDisputeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTellor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addTip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedToTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didMine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "didVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDisputeVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeIdByDisputeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeUintVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNewValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNewValueById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinersByRequestIdAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewCurrentVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewValueCountbyRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewVariablesOnDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByQueryHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByRequestQIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestUintVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionsByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampbyRequestIDandIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopRequestIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUintVar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVariablesOnDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestStakingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMiningSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockDisputeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTellor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITellor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITellorInterface;

  functions: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    depositStake(overrides?: Overrides): Promise<ContractTransaction>;

    "depositStake()"(overrides?: Overrides): Promise<ContractTransaction>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: boolean;
      3: boolean;
      4: string;
      5: string;
      6: string;
      7: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      8: BigNumber;
    }>;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: boolean;
      3: boolean;
      4: string;
      5: string;
      6: string;
      7: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      8: BigNumber;
    }>;

    getCurrentVariables(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    "getCurrentVariables()"(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getLastNewValue(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "getLastNewValue()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [string, string, string, string, string];
    }>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [string, string, string, string, string];
    }>;

    getNewCurrentVariables(overrides?: CallOverrides): Promise<{
      _challenge: string;
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      _difficutly: BigNumber;
      _tip: BigNumber;
      0: string;
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    "getNewCurrentVariables()"(overrides?: CallOverrides): Promise<{
      _challenge: string;
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      _difficutly: BigNumber;
      _tip: BigNumber;
      0: string;
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getNewVariablesOnDeck(overrides?: CallOverrides): Promise<{
      idsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      tipsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "getNewVariablesOnDeck()"(overrides?: CallOverrides): Promise<{
      idsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      tipsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRequestQ(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getRequestQ()"(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTopRequestIDs(overrides?: CallOverrides): Promise<{
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "getTopRequestIDs()"(overrides?: CallOverrides): Promise<{
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    getUintVar(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVariablesOnDeck(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    "getVariablesOnDeck()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    proposeFork(
      _propNewTellorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeFork(address)"(
      _propNewTellorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposeOwnership(
      _pendingOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeOwnership(address)"(
      _pendingOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestStakingWithdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "requestStakingWithdraw()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "submitMiningSolution(string,uint256[5],uint256[5])"(
      _nonce: string,
      _requestId: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _value: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockDisputeFee(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockDisputeFee(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTellor(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTellor(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawStake(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawStake()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  addTip(
    _requestId: BigNumberish,
    _tip: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTip(uint256,uint256)"(
    _requestId: BigNumberish,
    _tip: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    _user: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _user: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowedToTrade(
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowedToTrade(address,uint256)"(
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beginDispute(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    _minerIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "beginDispute(uint256,uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    _minerIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  depositStake(overrides?: Overrides): Promise<ContractTransaction>;

  "depositStake()"(overrides?: Overrides): Promise<ContractTransaction>;

  didMine(
    _challenge: BytesLike,
    _miner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "didMine(bytes32,address)"(
    _challenge: BytesLike,
    _miner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  didVote(
    _disputeId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "didVote(uint256,address)"(
    _disputeId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAddressVars(_data: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getAddressVars(bytes32)"(
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllDisputeVars(
    _disputeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
    2: boolean;
    3: boolean;
    4: string;
    5: string;
    6: string;
    7: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    8: BigNumber;
  }>;

  "getAllDisputeVars(uint256)"(
    _disputeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
    2: boolean;
    3: boolean;
    4: string;
    5: string;
    6: string;
    7: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    8: BigNumber;
  }>;

  getCurrentVariables(overrides?: CallOverrides): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
  }>;

  "getCurrentVariables()"(overrides?: CallOverrides): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
  }>;

  getDisputeIdByDisputeHash(
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeIdByDisputeHash(bytes32)"(
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDisputeUintVars(
    _disputeId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeUintVars(uint256,bytes32)"(
    _disputeId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastNewValue(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  "getLastNewValue()"(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  getLastNewValueById(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  "getLastNewValueById(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  getMinedBlockNum(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinedBlockNum(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinersByRequestIdAndTimestamp(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  getNewCurrentVariables(overrides?: CallOverrides): Promise<{
    _challenge: string;
    _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    _difficutly: BigNumber;
    _tip: BigNumber;
    0: string;
    1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    2: BigNumber;
    3: BigNumber;
  }>;

  "getNewCurrentVariables()"(overrides?: CallOverrides): Promise<{
    _challenge: string;
    _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    _difficutly: BigNumber;
    _tip: BigNumber;
    0: string;
    1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    2: BigNumber;
    3: BigNumber;
  }>;

  getNewValueCountbyRequestId(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNewValueCountbyRequestId(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNewVariablesOnDeck(overrides?: CallOverrides): Promise<{
    idsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    tipsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  }>;

  "getNewVariablesOnDeck()"(overrides?: CallOverrides): Promise<{
    idsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    tipsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  }>;

  getRequestIdByQueryHash(
    _request: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestIdByQueryHash(bytes32)"(
    _request: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestIdByRequestQIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestIdByRequestQIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestIdByTimestamp(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestIdByTimestamp(uint256)"(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestQ(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  "getRequestQ()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getRequestUintVars(
    _requestId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestUintVars(uint256,bytes32)"(
    _requestId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestVars(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "getRequestVars(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  getStakerInfo(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getStakerInfo(address)"(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getSubmissionsByTimestamp(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getSubmissionsByTimestamp(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTimestampbyRequestIDandIndex(
    _requestID: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTimestampbyRequestIDandIndex(uint256,uint256)"(
    _requestID: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTopRequestIDs(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getTopRequestIDs()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "getUintVar(bytes32)"(
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVariablesOnDeck(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: string;
  }>;

  "getVariablesOnDeck()"(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: string;
  }>;

  isInDispute(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isInDispute(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  proposeFork(
    _propNewTellorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeFork(address)"(
    _propNewTellorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposeOwnership(
    _pendingOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeOwnership(address)"(
    _pendingOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestStakingWithdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "requestStakingWithdraw()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  retrieveData(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "retrieveData(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "submitMiningSolution(string,uint256[5],uint256[5])"(
    _nonce: string,
    _requestId: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _value: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitMiningSolution(string,uint256,uint256)"(
    _nonce: string,
    _requestId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tallyVotes(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tallyVotes(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockDisputeFee(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockDisputeFee(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTellor(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTellor(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vote(
    _disputeId: BigNumberish,
    _supportsDispute: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(uint256,bool)"(
    _disputeId: BigNumberish,
    _supportsDispute: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawStake(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawStake()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    depositStake(overrides?: CallOverrides): Promise<void>;

    "depositStake()"(overrides?: CallOverrides): Promise<void>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: boolean;
      3: boolean;
      4: string;
      5: string;
      6: string;
      7: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      8: BigNumber;
    }>;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: boolean;
      3: boolean;
      4: string;
      5: string;
      6: string;
      7: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      8: BigNumber;
    }>;

    getCurrentVariables(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    "getCurrentVariables()"(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
    }>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastNewValue(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "getLastNewValue()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    getNewCurrentVariables(overrides?: CallOverrides): Promise<{
      _challenge: string;
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      _difficutly: BigNumber;
      _tip: BigNumber;
      0: string;
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    "getNewCurrentVariables()"(overrides?: CallOverrides): Promise<{
      _challenge: string;
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      _difficutly: BigNumber;
      _tip: BigNumber;
      0: string;
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewVariablesOnDeck(overrides?: CallOverrides): Promise<{
      idsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      tipsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "getNewVariablesOnDeck()"(overrides?: CallOverrides): Promise<{
      idsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      tipsOnDeck: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQ(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getRequestQ()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopRequestIDs(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getTopRequestIDs()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVariablesOnDeck(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    "getVariablesOnDeck()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    proposeFork(
      _propNewTellorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeFork(address)"(
      _propNewTellorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeOwnership(
      _pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeOwnership(address)"(
      _pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestStakingWithdraw(overrides?: CallOverrides): Promise<void>;

    "requestStakingWithdraw()"(overrides?: CallOverrides): Promise<void>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitMiningSolution(string,uint256[5],uint256[5])"(
      _nonce: string,
      _requestId: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _value: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockDisputeFee(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockDisputeFee(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTellor(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTellor(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(overrides?: CallOverrides): Promise<void>;

    "withdrawStake()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimOwnership(overrides?: Overrides): Promise<BigNumber>;

    "claimOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositStake(overrides?: Overrides): Promise<BigNumber>;

    "depositStake()"(overrides?: Overrides): Promise<BigNumber>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVariables(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentVariables()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastNewValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastNewValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewCurrentVariables(overrides?: CallOverrides): Promise<BigNumber>;

    "getNewCurrentVariables()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewVariablesOnDeck(overrides?: CallOverrides): Promise<BigNumber>;

    "getNewVariablesOnDeck()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQ(overrides?: CallOverrides): Promise<BigNumber>;

    "getRequestQ()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopRequestIDs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTopRequestIDs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVariablesOnDeck(overrides?: CallOverrides): Promise<BigNumber>;

    "getVariablesOnDeck()"(overrides?: CallOverrides): Promise<BigNumber>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeFork(
      _propNewTellorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeFork(address)"(
      _propNewTellorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposeOwnership(
      _pendingOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeOwnership(address)"(
      _pendingOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestStakingWithdraw(overrides?: Overrides): Promise<BigNumber>;

    "requestStakingWithdraw()"(overrides?: Overrides): Promise<BigNumber>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitMiningSolution(string,uint256[5],uint256[5])"(
      _nonce: string,
      _requestId: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _value: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockDisputeFee(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockDisputeFee(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTellor(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTellor(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawStake(overrides?: Overrides): Promise<BigNumber>;

    "withdrawStake()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositStake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "depositStake()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVariables(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastNewValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastNewValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewCurrentVariables(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewVariablesOnDeck()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestQ(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRequestQ()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopRequestIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTopRequestIDs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUintVar(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVariablesOnDeck()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeFork(
      _propNewTellorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeFork(address)"(
      _propNewTellorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposeOwnership(
      _pendingOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeOwnership(address)"(
      _pendingOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestStakingWithdraw(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestStakingWithdraw()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "submitMiningSolution(string,uint256[5],uint256[5])"(
      _nonce: string,
      _requestId: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _value: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockDisputeFee(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockDisputeFee(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTellor(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTellor(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawStake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawStake()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
